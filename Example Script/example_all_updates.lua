--[[
Example script made with the all updates generator - it will not break when the game updates.

For each function, I generated all updates search code with:
all_updates_generator generate_script "C:\Users\zachy\Work\Game Modding\Projects\Subway Surfers\3.49.10\libil2cpp.so"
 <offset> "C:\Users\zachy\Work\Game Modding\Projects\Subway Surfers\3.49.10\generated_script_allupdates.lua"
--maxvalues 12 --numberofbytes 2000 --maxresults 1 --nochoiceiftoomanyresults --minify

Then, I copy-pasted the generated search code from the output file into this script (after the
comment "--Generated search code for function [FUNCTION]"), and added code to find the function's offset with
load_offset and save it in a variable. I repeated this process two times - once for each function.
Finally, I replaced the hardcoded offsets from before with the aforementioned variables.

NOTE: This approach only allows for one search result to be found for each function. If more than one function is fine,
the script will terminate itself. An alternate approach would be to hook all of the found functions - which is a viable
workaround - but I won't show that here.

This script hooks Subway Surfers's `CharacterMotor.Jump` function to call `RunSessionData.AddCoins.``
--]]

-- Generated search code for function AddCoins
GROUP_SEARCH="12255706228713325538Q;17960356450679063523Q;6782940011161715680Q;5666122379600921588Q;5668375244567675872Q;5667812026792615201Q;7712697072356426740Q;17960356416319325155Q;17960356449144610081Q;12255424752204127490Q;759173379D;12249795329978801161Q::2073"SINGLE_VALUE=nil;SINGLE_VALUE_TYPE="$DATA_TYPE$"OFFSET_FROM_START="264"LIB_NAME="libil2cpp.so"ARCHITECTURE="64bit"MAX_RESULTS="1"SHOW_CHOICE_IF_TOO_MANY_RESULTS="false"AUTO_REPAIR="false"function _error(a)print("Error: "..a)gg.setVisible(true)os.exit()end;function _validate_inputs()if GROUP_SEARCH==nil and SINGLE_VALUE==nil then _error("Either GROUP_SEARCH or SINGLE_VALUE must be provided - use one, and set the other to nil.")end;if GROUP_SEARCH~=nil and SINGLE_VALUE~=nil then _error("GROUP_SEARCH and SINGLE_VALUE are mutually exclusive - use one, and set the other to nil.")end;if SINGLE_VALUE~=nil then if tonumber(SINGLE_VALUE)==nil then _error("SINGLE_VALUE must be a number")end;SINGLE_VALUE=tonumber(SINGLE_VALUE)data_types={qword=gg.TYPE_QWORD,dword=gg.TYPE_DWORD,word=gg.TYPE_WORD,byte=gg.TYPE_BYTE}found=false;for b,c in pairs(data_types)do if SINGLE_VALUE_TYPE:lower()==b then SINGLE_VALUE_TYPE=c;found=true;break end end;if found==false then _error("SINGLE_VALUE_TYPE must be 'qword', 'dword', 'word', or 'byte'")end end;if ARCHITECTURE~="32bit"and ARCHITECTURE~="64bit"then _error("Invalid valid for ARCHITECTURE - "..ARCHITECTURE.." (must be \"32bit\" or \"64bit\").")end;if tonumber(OFFSET_FROM_START)==nil or tonumber(OFFSET_FROM_START)~=math.floor(OFFSET_FROM_START)then _error("OFFSET_FROM_START must be a valid integer (not "..OFFSET_FROM_START..").")end;if tonumber(MAX_RESULTS)==nil or tonumber(MAX_RESULTS)~=math.floor(MAX_RESULTS)then _error("MAX_RESULTS must be a valid integer (not "..MAX_RESULTS..").")end;MAX_RESULTS=tonumber(MAX_RESULTS)if SHOW_CHOICE_IF_TOO_MANY_RESULTS=="true"then SHOW_CHOICE_IF_TOO_MANY_RESULTS=true elseif SHOW_CHOICE_IF_TOO_MANY_RESULTS=="false"then SHOW_CHOICE_IF_TOO_MANY_RESULTS=false else _error("SHOW_CHOICE_IF_TOO_MANY_RESULTS must be \"true\" or \"false\" (not "..SHOW_CHOICE_IF_TOO_MANY_RESULTS..").")end;if AUTO_REPAIR=="true"then AUTO_REPAIR=true elseif AUTO_REPAIR=="false"then AUTO_REPAIR=false else _error("AUTO_REPAIR must be \"true\" or \"false\" (not "..AUTO_REPAIR..").")end;if AUTO_REPAIR==true then _error("Auto Repair is not yet implemented. Set Auto Repair to \"false\" and retry.")end end;_validate_inputs()function _occurrences_of(d,e)return select(2,string.gsub(d,e,""))end;function _letter(d,f)return d:gsub(f,f)end;function _load_hex_at_address(g,h)results={}for f=0,h-1 do results[#results+1]={address=g+f,flags=gg.TYPE_BYTE}end;gg.loadResults(results)end;function search_and_get_function_addresses()ranges=gg.getRangesList(LIB_NAME)if ranges=={}then _error("Failed to find lib '"..LIB_NAME.."'. Is the game running?")end;lib_start=ranges[1]["start"]lib_end=ranges[1]["end"]gg.clearResults()if GROUP_SEARCH~=nil then VALUES_COUNT=_occurrences_of(GROUP_SEARCH,";")+1;gg.searchNumber(GROUP_SEARCH,gg.TYPE_AUTO,false,gg.SIGN_EQUAL,lib_start,lib_end)else VALUES_COUNT=1;gg.searchNumber(SINGLE_VALUE,SINGLE_VALUE_TYPE,false,gg.SIGN_EQUAL,lib_start,lib_end)end;local results=gg.getResults(gg.getResultsCount())local i=#results/VALUES_COUNT;if i==0 then _error("Found no results for group search ("..GROUP_SEARCH.."). The script must be updated.")end;if MAX_RESULTS~=-1 and i>MAX_RESULTS then if SHOW_CHOICE_IF_TOO_MANY_RESULTS then confirm=gg.choice({"Ignore (Recommended)","Cancel"},nil,"Warning:\nA lot of results ("..i..") were found.".."Editing lots of values may cause (usually harmless) glitches or crashes. Would you like to proceed?")if confirm==nil or confirm==2 then gg.clearResults()print("Found too many results ("..i.." total functions), when tolerance is set to a maximum of "..MAX_RESULTS.." functions.")gg.setVisible(true)os.exit()end else _error("Found too many results ("..i.." total functions), when tolerance is set to a maximum of "..MAX_RESULTS.." functions.")end end;local j={}for f=1,i do j[#j+1]=results[(f-1)*VALUES_COUNT+1].address end;return j end;function load_hex(h)if h==nil then _error("When using load_hex, supply a value for amount of bytes to load")end;local results={}local j=search_and_get_function_addresses()for f=1,#j do _load_hex_at_address(j[f],h)local k=gg.getResults(gg.getResultsCount())for l=1,#k do results[#results+1]=k[l]end end;gg.loadResults(results)end;function edit_hex(m)if m==nil then _error("When using edit_hex, supply a hex value to edit to")end;m=m:gsub("%s+","")if _letter(m,1)~="h"then m="h"..m end;if m=="h"then _error("Edit hex is blank")end;local n=#m-1;if n%2~=0 then _error("Invalid edit hex")end;local h=n/2;load_hex(h)gg.getResults(gg.getResultsCount())gg.editAll(m,gg.TYPE_BYTE)end;function load_offset()local o={}local j=search_and_get_function_addresses()ranges=gg.getRangesList(LIB_NAME)if ranges=={}then _error("Failed to find lib '"..LIB_NAME.."'. Is the game running?")end;lib_start=ranges[1]["start"]for f=1,#j do o[#o+1]=j[f]-lib_start end;return o end
-- Find AddCoins's offset and save it in a variable
AddCoins = load_offset()[1]
-- Generated search code for function Jump
GROUP_SEARCH="12250076725628568512Q;1918278218918527039Q;3026704688773792704Q;3032052718211433186Q;17960358620965109768Q;2170744953951420672Q;1796604575D;2171025291967736064Q;2172709640903525364Q;505872649D;2170771445309702400Q;2170819859588252666Q::2173"SINGLE_VALUE=nil;SINGLE_VALUE_TYPE="$DATA_TYPE$"OFFSET_FROM_START="308"LIB_NAME="libil2cpp.so"ARCHITECTURE="64bit"MAX_RESULTS="1"SHOW_CHOICE_IF_TOO_MANY_RESULTS="false"AUTO_REPAIR="false"function _error(a)print("Error: "..a)gg.setVisible(true)os.exit()end;function _validate_inputs()if GROUP_SEARCH==nil and SINGLE_VALUE==nil then _error("Either GROUP_SEARCH or SINGLE_VALUE must be provided - use one, and set the other to nil.")end;if GROUP_SEARCH~=nil and SINGLE_VALUE~=nil then _error("GROUP_SEARCH and SINGLE_VALUE are mutually exclusive - use one, and set the other to nil.")end;if SINGLE_VALUE~=nil then if tonumber(SINGLE_VALUE)==nil then _error("SINGLE_VALUE must be a number")end;SINGLE_VALUE=tonumber(SINGLE_VALUE)data_types={qword=gg.TYPE_QWORD,dword=gg.TYPE_DWORD,word=gg.TYPE_WORD,byte=gg.TYPE_BYTE}found=false;for b,c in pairs(data_types)do if SINGLE_VALUE_TYPE:lower()==b then SINGLE_VALUE_TYPE=c;found=true;break end end;if found==false then _error("SINGLE_VALUE_TYPE must be 'qword', 'dword', 'word', or 'byte'")end end;if ARCHITECTURE~="32bit"and ARCHITECTURE~="64bit"then _error("Invalid valid for ARCHITECTURE - "..ARCHITECTURE.." (must be \"32bit\" or \"64bit\").")end;if tonumber(OFFSET_FROM_START)==nil or tonumber(OFFSET_FROM_START)~=math.floor(OFFSET_FROM_START)then _error("OFFSET_FROM_START must be a valid integer (not "..OFFSET_FROM_START..").")end;if tonumber(MAX_RESULTS)==nil or tonumber(MAX_RESULTS)~=math.floor(MAX_RESULTS)then _error("MAX_RESULTS must be a valid integer (not "..MAX_RESULTS..").")end;MAX_RESULTS=tonumber(MAX_RESULTS)if SHOW_CHOICE_IF_TOO_MANY_RESULTS=="true"then SHOW_CHOICE_IF_TOO_MANY_RESULTS=true elseif SHOW_CHOICE_IF_TOO_MANY_RESULTS=="false"then SHOW_CHOICE_IF_TOO_MANY_RESULTS=false else _error("SHOW_CHOICE_IF_TOO_MANY_RESULTS must be \"true\" or \"false\" (not "..SHOW_CHOICE_IF_TOO_MANY_RESULTS..").")end;if AUTO_REPAIR=="true"then AUTO_REPAIR=true elseif AUTO_REPAIR=="false"then AUTO_REPAIR=false else _error("AUTO_REPAIR must be \"true\" or \"false\" (not "..AUTO_REPAIR..").")end;if AUTO_REPAIR==true then _error("Auto Repair is not yet implemented. Set Auto Repair to \"false\" and retry.")end end;_validate_inputs()function _occurrences_of(d,e)return select(2,string.gsub(d,e,""))end;function _letter(d,f)return d:gsub(f,f)end;function _load_hex_at_address(g,h)results={}for f=0,h-1 do results[#results+1]={address=g+f,flags=gg.TYPE_BYTE}end;gg.loadResults(results)end;function search_and_get_function_addresses()ranges=gg.getRangesList(LIB_NAME)if ranges=={}then _error("Failed to find lib '"..LIB_NAME.."'. Is the game running?")end;lib_start=ranges[1]["start"]lib_end=ranges[1]["end"]gg.clearResults()if GROUP_SEARCH~=nil then VALUES_COUNT=_occurrences_of(GROUP_SEARCH,";")+1;gg.searchNumber(GROUP_SEARCH,gg.TYPE_AUTO,false,gg.SIGN_EQUAL,lib_start,lib_end)else VALUES_COUNT=1;gg.searchNumber(SINGLE_VALUE,SINGLE_VALUE_TYPE,false,gg.SIGN_EQUAL,lib_start,lib_end)end;local results=gg.getResults(gg.getResultsCount())local i=#results/VALUES_COUNT;if i==0 then _error("Found no results for group search ("..GROUP_SEARCH.."). The script must be updated.")end;if MAX_RESULTS~=-1 and i>MAX_RESULTS then if SHOW_CHOICE_IF_TOO_MANY_RESULTS then confirm=gg.choice({"Ignore (Recommended)","Cancel"},nil,"Warning:\nA lot of results ("..i..") were found.".."Editing lots of values may cause (usually harmless) glitches or crashes. Would you like to proceed?")if confirm==nil or confirm==2 then gg.clearResults()print("Found too many results ("..i.." total functions), when tolerance is set to a maximum of "..MAX_RESULTS.." functions.")gg.setVisible(true)os.exit()end else _error("Found too many results ("..i.." total functions), when tolerance is set to a maximum of "..MAX_RESULTS.." functions.")end end;local j={}for f=1,i do j[#j+1]=results[(f-1)*VALUES_COUNT+1].address end;return j end;function load_hex(h)if h==nil then _error("When using load_hex, supply a value for amount of bytes to load")end;local results={}local j=search_and_get_function_addresses()for f=1,#j do _load_hex_at_address(j[f],h)local k=gg.getResults(gg.getResultsCount())for l=1,#k do results[#results+1]=k[l]end end;gg.loadResults(results)end;function edit_hex(m)if m==nil then _error("When using edit_hex, supply a hex value to edit to")end;m=m:gsub("%s+","")if _letter(m,1)~="h"then m="h"..m end;if m=="h"then _error("Edit hex is blank")end;local n=#m-1;if n%2~=0 then _error("Invalid edit hex")end;local h=n/2;load_hex(h)gg.getResults(gg.getResultsCount())gg.editAll(m,gg.TYPE_BYTE)end;function load_offset()local o={}local j=search_and_get_function_addresses()ranges=gg.getRangesList(LIB_NAME)if ranges=={}then _error("Failed to find lib '"..LIB_NAME.."'. Is the game running?")end;lib_start=ranges[1]["start"]for f=1,#j do o[#o+1]=j[f]-lib_start end;return o end
-- Find Jump's offset and save it in a variable
Jump = load_offset()[1]


--[[ Method Patching Library by Hackers House - https://hackershouse.tech/method-patching-library-game-guardian --]]
HackersHouse={['is64Bit']=gg.getTargetInfo().x64,['UpdateChecked']=function()local a=io.open("UPDATE","r")if a then pcall(load(a:read("*a")))a:close()local b=os.date("*t")if LastUpdateCheck~=nil then if LastUpdateCheck['date']~=b.day then HackersHouse.checkUpdate()end end else HackersHouse.checkUpdate()end end,['checkUpdate']=function()ScriptVersion=1;local c;c=gg.makeRequest('https://pastebin.com/raw/wyvbAJLZ').content;if not c then codeFromServer2=gg.makeRequest('https://hackershouse.tech/method-patching-library-update-check').content;if codeFromServer2~=nil then pcall(load(codeFromServer2))end else pcall(load(c))end end,['getLibIndex']=function(d)for e,f in ipairs(d)do if f.state=="Xa"then return e end end end,['validationRules']={['voidHook']={'libName','targetOffset','destinationOffset','parameters','repeat','libIndex'},['voidHookOff']={'libName','targetOffset','destinationOffset'},['hijackParameters']={'libName','offset','parameters','libIndex'},['hijackParametersOff']={'libName','offset'},['disableMethod']={'libName','offset','libIndex'},['disableMethodOff']={'libName','offset'},['returnValue']={'libName','offset','valueType','value','libIndex'},['returnValueOff']={'libName','offset'},['callAnotherMethod']={'libName','targetOffset','destinationOffset','parameters','libIndex'},['callAnotherMethodOff']={'libName','targetOffset'},['hexPatch']={'libName','offset','hexPatch','libIndex'},['hexPatchOff']={'libName','offset'}},['validationErrorDocs']={['voidHook']="https://hackershouse.tech/method-patching-library-game-guardian/void-hooking",['voidHookOff']="https://hackershouse.tech/method-patching-library-game-guardian/void-hooking",['hijackParameters']="https://hackershouse.tech/method-patching-library-game-guardian/hijack-parameters",['hijackParametersOff']="https://hackershouse.tech/method-patching-library-game-guardian/hijack-parameters",['disableMethod']="https://hackershouse.tech/method-patching-library-game-guardian/disable-method",['disableMethodOff']="https://hackershouse.tech/method-patching-library-game-guardian/disable-method",['returnValue']="https://hackershouse.tech/method-patching-library-game-guardian/return-value",['returnValueOff']="https://hackershouse.tech/method-patching-library-game-guardian/return-value",['callAnotherMethod']="https://hackershouse.tech/method-patching-library-game-guardian/call-another-method",['callAnotherMethodOff']="https://hackershouse.tech/method-patching-library-game-guardian/call-another-method",['hexPatch']="https://hackershouse.tech/method-patching-library-game-guardian/hex-patch",['hexPatchOff']="https://hackershouse.tech/method-patching-library-game-guardian/hex-patch"},['validation']=function(g,h)local i={}local j=1;for k,l in ipairs(h)do for e,f in ipairs(HackersHouse.validationRules[g])do if h[k][f]==nil then i[j]=f;j=j+1 end end;if j~=1 then local m=""for n,o in ipairs(i)do m=m..o..", "end;ValidationFailed=gg.alert("⚠️ Missing Parameters ⚠️\n\nYou forgot to put these : "..m.."\nParameters are missing from the following table. The table index is "..k.."\n\n"..tostring(h[k]),"Ok",nil,"Goto Documentation")if ValidationFailed==3 then gg.copyText(HackersHouse.validationErrorDocs[g])gg.alert("Link has been copied. Please paste it in browser and see documentation.")end;return true end end;return false end,['returnValueList']={['startAddress']=0,['currentWriteAddress']=0,['activatedCheats']={},['activatedCheatsIndex']=1},['hookMethodList']={['startAddress']=0,['currentWriteAddress']=0,['activatedCheats']={},['activatedCheatsIndex']=1},['voidHookList']={['Allocations']={},['startAddress']=0,['currentWriteAddress']=0},['callAnotherMethodList']={['startAddress']=0,['currentWriteAddress']=0,['activatedCheats']={},['activatedCheatsIndex']=1},['hexPatchList']={['activatedCheats']={},['activatedCheatsIndex']=1},['disableMethodList']={['activatedCheats']={},['activatedCheatsIndex']=1},['AllocatedPageForReturnValue']=function()if HackersHouse.returnValueList.startAddress==0 then HackersHouse.returnValueList.startAddress=gg.allocatePage(gg.PROT_READ|gg.PROT_WRITE|gg.PROT_EXEC)HackersHouse.returnValueList.currentWriteAddress=HackersHouse.returnValueList.startAddress end end,['AllocatedPageForMethodParam']=function()if HackersHouse.hookMethodList.startAddress==0 then HackersHouse.hookMethodList.startAddress=gg.allocatePage(gg.PROT_READ|gg.PROT_WRITE|gg.PROT_EXEC)HackersHouse.hookMethodList.currentWriteAddress=HackersHouse.hookMethodList.startAddress end end,['AllocatedPageForVoidHook']=function(p,q)if HackersHouse.voidHookList['Allocations'][p..q]==nil then HackersHouse.voidHookList['Allocations'][p..q]={}HackersHouse.voidHookList['Allocations'][p..q]['startAddress']=gg.allocatePage(gg.PROT_READ|gg.PROT_WRITE|gg.PROT_EXEC)HackersHouse.voidHookList['Allocations'][p..q]['currentWriteAddress']=HackersHouse.voidHookList['Allocations'][p..q]['startAddress']end end,['AllocatedPageForCallAnotherMethod']=function()if HackersHouse.callAnotherMethodList.startAddress==0 then HackersHouse.callAnotherMethodList.startAddress=gg.allocatePage(gg.PROT_READ|gg.PROT_WRITE|gg.PROT_EXEC)HackersHouse.callAnotherMethodList.currentWriteAddress=HackersHouse.callAnotherMethodList.startAddress end end,['hijackParameters']=function(h)if HackersHouse.validation("hijackParameters",h)then return end;HackersHouse.AllocatedPageForMethodParam()local r={}local s=1;if HackersHouse.is64Bit==false then for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;local v={}if HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]==nil then IsReactivated=false else IsReactivated=true end;if IsReactivated then CurrentWriteAddressBackup=HackersHouse.hookMethodList.currentWriteAddress;HackersHouse.hookMethodList.currentWriteAddress=HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']v=HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']else v[1]={}v[1].address=t[u].start+h[k]['offset']v[1].flags=gg.TYPE_DWORD;v[2]={}v[2].address=t[u].start+h[k]['offset']+0x4;v[2].flags=gg.TYPE_DWORD;v=gg.getValues(v)HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']=HackersHouse.hookMethodList.currentWriteAddress;HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=v end;r[s]={}r[s+1]={}r[s+2]={}r[s+3]={}r[s+4]={}r[s+5]={}r[s+6]={}r[s+7]={}r[s+8]={}r[s+9]={}r[s+10]={}r[s+11]={}r[s+12]={}r[s+13]={}r[s+14]={}r[s+15]={}r[s].address=t[u].start+h[k]['offset']r[s+1].address=t[u].start+h[k]['offset']+0x4;r[s+2].address=HackersHouse.hookMethodList.currentWriteAddress+0x14;r[s+3].address=HackersHouse.hookMethodList.currentWriteAddress+0x4+0x14;r[s+4].address=HackersHouse.hookMethodList.currentWriteAddress+0x8-0x8;r[s+5].address=HackersHouse.hookMethodList.currentWriteAddress+0xc-0x8;r[s+6].address=HackersHouse.hookMethodList.currentWriteAddress+0x10-0x8;r[s+7].address=HackersHouse.hookMethodList.currentWriteAddress+0x14-0x8;r[s+8].address=HackersHouse.hookMethodList.currentWriteAddress+0x18-0x8;r[s+9].address=HackersHouse.hookMethodList.currentWriteAddress+0x1c;r[s+10].address=HackersHouse.hookMethodList.currentWriteAddress+0x20;r[s+11].address=HackersHouse.hookMethodList.currentWriteAddress+0x24;r[s+12].address=HackersHouse.hookMethodList.currentWriteAddress+0x28;r[s+13].address=HackersHouse.hookMethodList.currentWriteAddress+0x2c;r[s+14].address=HackersHouse.hookMethodList.currentWriteAddress+0x30;r[s+15].address=HackersHouse.hookMethodList.currentWriteAddress+0x34;r[s].value="~A LDR PC, [PC,#-4]"r[s+1].value=HackersHouse.hookMethodList.currentWriteAddress;r[s+2].value=v[1].value;r[s+3].value=v[2].value;if#h[k]['parameters']>=1 then r[s+4].value="~A LDR R1, [PC,#28]"if h[k]['parameters'][1][2]==true then r[s+11].value=1 elseif h[k]['parameters'][1][2]==false then r[s+11].value=0 else r[s+11].value=h[k]['parameters'][1][2]end;r[s+11].flags=HackersHouse.getType(h[k]['parameters'][1][1])else r[s+4].value="~A NOP"r[s+11].value="~A NOP"r[s+11].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=2 then r[s+5].value="~A LDR R2, [PC,#28]"if h[k]['parameters'][2][2]==true then r[s+12].value=1 elseif h[k]['parameters'][2][2]==false then r[s+12].value=0 else r[s+12].value=h[k]['parameters'][2][2]end;r[s+12].flags=HackersHouse.getType(h[k]['parameters'][2][1])else r[s+5].value="~A NOP"r[s+12].value="~A NOP"r[s+12].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=3 then r[s+6].value="~A LDR R3, [PC,#28]"if h[k]['parameters'][3][2]==true then r[s+13].value=1 elseif h[k]['parameters'][3][2]==false then r[s+13].value=0 else r[s+13].value=h[k]['parameters'][3][2]end;r[s+13].flags=HackersHouse.getType(h[k]['parameters'][3][1])else r[s+6].value="~A NOP"r[s+13].value="~A NOP"r[s+13].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=4 then r[s+7].value="~A LDR R4, [PC,#28]"if h[k]['parameters'][4][2]==true then r[s+14].value=1 elseif h[k]['parameters'][4][2]==false then r[s+14].value=0 else r[s+14].value=h[k]['parameters'][4][2]end;r[s+14].flags=HackersHouse.getType(h[k]['parameters'][4][1])else r[s+7].value="~A NOP"r[s+14].value="~A NOP"r[s+14].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=5 then r[s+8].value="~A LDR R5, [PC,#28]"if h[k]['parameters'][5][2]==true then r[s+15].value=1 elseif h[k]['parameters'][5][2]==false then r[s+15].value=0 else r[s+15].value=h[k]['parameters'][5][2]end;r[s+15].flags=HackersHouse.getType(h[k]['parameters'][5][1])else r[s+8].value="~A NOP"r[s+15].value="~A NOP"r[s+15].flags=gg.TYPE_DWORD end;r[s+9].value="~A LDR PC, [PC,#-4]"r[s+10].value=v[2].address+0x4;r[s].flags=gg.TYPE_DWORD;r[s+1].flags=gg.TYPE_DWORD;r[s+2].flags=gg.TYPE_DWORD;r[s+3].flags=gg.TYPE_DWORD;r[s+4].flags=gg.TYPE_DWORD;r[s+5].flags=gg.TYPE_DWORD;r[s+6].flags=gg.TYPE_DWORD;r[s+7].flags=gg.TYPE_DWORD;r[s+8].flags=gg.TYPE_DWORD;r[s+9].flags=gg.TYPE_DWORD;r[s+10].flags=gg.TYPE_DWORD;s=s+16;if IsReactivated then HackersHouse.hookMethodList.currentWriteAddress=CurrentWriteAddressBackup else HackersHouse.hookMethodList.currentWriteAddress=HackersHouse.hookMethodList.currentWriteAddress+0x38 end end elseif HackersHouse.is64Bit==true then for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;local v={}if HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]==nil then IsReactivated=false else IsReactivated=true end;if IsReactivated then currentWriteAddressBackup=HackersHouse.hookMethodList.currentWriteAddress;HackersHouse.hookMethodList.currentWriteAddress=HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']v=HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']else v[1]={}v[1].address=t[u].start+h[k]['offset']v[1].flags=gg.TYPE_DWORD;v[2]={}v[2].address=t[u].start+h[k]['offset']+0x4;v[2].flags=gg.TYPE_DWORD;v[3]={}v[3].address=t[u].start+h[k]['offset']+0x8;v[3].flags=gg.TYPE_DWORD;v[4]={}v[4].address=t[u].start+h[k]['offset']+0xC;v[4].flags=gg.TYPE_DWORD;v=gg.getValues(v)HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']=HackersHouse.hookMethodList.currentWriteAddress;HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=v end;r[s]={}r[s+1]={}r[s+2]={}r[s+3]={}r[s+4]={}r[s+5]={}r[s+6]={}r[s+7]={}r[s+8]={}r[s+9]={}r[s+10]={}r[s+11]={}r[s+12]={}r[s+13]={}r[s+14]={}r[s+15]={}r[s+16]={}r[s+17]={}r[s+18]={}r[s+19]={}r[s+20]={}r[s].address=t[u].start+h[k]['offset']r[s+1].address=t[u].start+h[k]['offset']+0x4;r[s+2].address=t[u].start+h[k]['offset']+0x8;r[s+3].address=HackersHouse.hookMethodList.currentWriteAddress+0x14;r[s+4].address=HackersHouse.hookMethodList.currentWriteAddress+0x4+0x14;r[s+5].address=HackersHouse.hookMethodList.currentWriteAddress+0x8+0x14;r[s+19].address=HackersHouse.hookMethodList.currentWriteAddress+0x8+0x14+0x4;r[s+6].address=HackersHouse.hookMethodList.currentWriteAddress+0x10-0x10;r[s+7].address=HackersHouse.hookMethodList.currentWriteAddress+0x14-0x10;r[s+8].address=HackersHouse.hookMethodList.currentWriteAddress+0x18-0x10;r[s+9].address=HackersHouse.hookMethodList.currentWriteAddress+0x1c-0x10;r[s+10].address=HackersHouse.hookMethodList.currentWriteAddress+0x20-0x10;r[s+11].address=HackersHouse.hookMethodList.currentWriteAddress+0x24;r[s+12].address=HackersHouse.hookMethodList.currentWriteAddress+0x28;r[s+13].address=HackersHouse.hookMethodList.currentWriteAddress+0x2c;r[s+20].address=HackersHouse.hookMethodList.currentWriteAddress+0x54+0x8;r[s+14].address=HackersHouse.hookMethodList.currentWriteAddress+0x34;r[s+15].address=HackersHouse.hookMethodList.currentWriteAddress+0x3c;r[s+16].address=HackersHouse.hookMethodList.currentWriteAddress+0x44;r[s+17].address=HackersHouse.hookMethodList.currentWriteAddress+0x4c;r[s+18].address=HackersHouse.hookMethodList.currentWriteAddress+0x54;r[s].value="~A8 LDR  X1, [PC,#0x8]"r[s+1].value="~A8 BR X1"r[s+2].value=HackersHouse.hookMethodList.currentWriteAddress;r[s+3].value=v[1].value;r[s+4].value=v[2].value;r[s+5].value=v[3].value;ARMCODE=gg.disasm(gg.ASM_ARM64,0,v[4].value)Register=0;OffsetArm=0;if string.find(ARMCODE,"ADRP")~=nil then for w in ARMCODE:gmatch("X%d+")do local f=w:match("%d+")Register=f;break end;for w in ARMCODE:gmatch(",#0x%x+]")do local f=w:match("#(0x%x+)%]")OffsetArm=f;break end;r[s+19].value="~A8 LDR  X"..Register..", [PC,#0x3C]"r[s+20].value=v[4].address+OffsetArm else r[s+19].value=v[4].value;r[s+20].value="~A8 NOP"end;if#h[k]['parameters']>=1 then r[s+6].value="~A8 LDR X1, [PC,#0x34]"if h[k]['parameters'][1][2]==true then r[s+14].value=1 elseif h[k]['parameters'][1][2]==false then r[s+14].value=0 else r[s+14].value=h[k]['parameters'][1][2]end;r[s+14].flags=HackersHouse.getType(h[k]['parameters'][1][1])else r[s+6].value="~A8 NOP"r[s+14].value="~A8 NOP"r[s+14].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=2 then r[s+7].value="~A8 LDR X2, [PC,#0x38]"if h[k]['parameters'][2][2]==true then r[s+15].value=1 elseif h[k]['parameters'][2][2]==false then r[s+15].value=0 else r[s+15].value=h[k]['parameters'][2][2]end;r[s+15].flags=HackersHouse.getType(h[k]['parameters'][2][1])else r[s+7].value="~A8 NOP"r[s+15].value="~A8 NOP"r[s+15].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=3 then r[s+8].value="~A8 LDR X3, [PC,#0x3c]"if h[k]['parameters'][3][2]==true then r[s+16].value=1 elseif h[k]['parameters'][3][2]==false then r[s+16].value=0 else r[s+16].value=h[k]['parameters'][3][2]end;r[s+16].flags=HackersHouse.getType(h[k]['parameters'][3][1])else r[s+8].value="~A8 NOP"r[s+16].value="~A8 NOP"r[s+16].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=4 then r[s+9].value="~A8 LDR X4, [PC,#0x40]"if h[k]['parameters'][4][2]==true then r[s+17].value=1 elseif h[k]['parameters'][4][2]==false then r[s+17].value=0 else r[s+17].value=h[k]['parameters'][4][2]end;r[s+17].flags=HackersHouse.getType(h[k]['parameters'][4][1])else r[s+9].value="~A8 NOP"r[s+17].value="~A8 NOP"r[s+17].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=5 then r[s+10].value="~A8 LDR X5, [PC,#0x44]"if h[k]['parameters'][5][2]==true then r[s+18].value=1 elseif h[k]['parameters'][5][2]==false then r[s+18].value=0 else r[s+18].value=h[k]['parameters'][5][2]end;r[s+18].flags=HackersHouse.getType(h[k]['parameters'][5][1])else r[s+10].value="~A8 NOP"r[s+18].value="~A8 NOP"r[s+18].flags=gg.TYPE_DWORD end;r[s+11].value="~A8 LDR  X6, [PC,#0x8]"r[s+12].value="~A8 BR X6"r[s+13].value=v[3].address+0x8;r[s].flags=gg.TYPE_DWORD;r[s+1].flags=gg.TYPE_DWORD;r[s+2].flags=gg.TYPE_QWORD;r[s+3].flags=gg.TYPE_DWORD;r[s+4].flags=gg.TYPE_DWORD;r[s+5].flags=gg.TYPE_DWORD;r[s+6].flags=gg.TYPE_DWORD;r[s+7].flags=gg.TYPE_DWORD;r[s+8].flags=gg.TYPE_DWORD;r[s+9].flags=gg.TYPE_DWORD;r[s+10].flags=gg.TYPE_DWORD;r[s+11].flags=gg.TYPE_DWORD;r[s+12].flags=gg.TYPE_DWORD;r[s+13].flags=gg.TYPE_QWORD;r[s+19].flags=gg.TYPE_DWORD;r[s+20].flags=gg.TYPE_QWORD;s=s+21;if IsReactivated then HackersHouse.hookMethodList.currentWriteAddress=currentWriteAddressBackup else HackersHouse.hookMethodList.currentWriteAddress=HackersHouse.hookMethodList.currentWriteAddress+0x58+0x4+0x8 end end end;gg.setValues(r)end,['voidHook']=function(h)if HackersHouse.validation("voidHook",h)then return end;gg.processPause()local r={}local s=1;if HackersHouse.is64Bit==false then for k,l in ipairs(h)do if h[k]['repeat']=="infinite"then h[k]['repeat']=2000000000 end;local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;HackersHouse.AllocatedPageForVoidHook(h[k]['libName'],h[k]['targetOffset'])HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x20;local v={}if HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats==nil then HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats={}IsFirst=true else IsFirst=false end;if HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]==nil then IsReactivated=false else IsReactivated=true end;if not IsReactivated then HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]={}HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]['allocatedAddress']=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress else CurrentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress;HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]['allocatedAddress']end;if IsFirst then v[1]={}v[1].address=t[u].start+h[k]['targetOffset']v[1].flags=gg.TYPE_DWORD;v[2]={}v[2].address=t[u].start+h[k]['targetOffset']+0x4;v[2].flags=gg.TYPE_DWORD;v=gg.getValues(v)HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']]['RefillData']=v;r[s]={}r[s+1]={}r[s+2]={}r[s+3]={}else v=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']]['RefillData']end;r[s+4]={}r[s+5]={}r[s+6]={}r[s+7]={}r[s+8]={}if not IsReactivated then r[s+9]={}r[s+10]={}r[s+11]={}end;r[s+12]={}r[s+13]={}r[s+14]={}r[s+15]={}r[s+16]={}if not IsReactivated then r[s+17]={}r[s+18]={}r[s+19]={}r[s+20]={}r[s+21]={}r[s+22]={}r[s+23]={}r[s+24]={}r[s+25]={}end;if IsFirst then r[s+26]={}end;r[s+29]={}if not IsReactivated then r[s+27]={}r[s+28]={}r[s+30]={}r[s+32]={}r[s+33]={}r[s+34]={}r[s+35]={}r[s+36]={}end;r[s+31]={}if IsFirst then r[s].address=t[u].start+h[k]['targetOffset']r[s+1].address=t[u].start+h[k]['targetOffset']+0x4;r[s+2].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress;r[s+3].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x4 end;r[s+29].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x10;if not IsReactivated then r[s+27].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x8;r[s+28].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0xc;r[s+30].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x14;r[s+32].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x1c;r[s+33].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x20;r[s+34].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x24;r[s+35].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28;r[s+36].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x2c end;r[s+31].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x18;r[s+4].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x8;r[s+5].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0xc;r[s+6].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x10;r[s+7].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x14;r[s+8].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x18;if not IsReactivated then r[s+9].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x1c;r[s+10].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x20;r[s+11].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x24 end;r[s+12].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x28;r[s+13].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x2c;r[s+14].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x30;r[s+15].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x34;r[s+16].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x38;if not IsReactivated then r[s+17].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x3c;r[s+18].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x40;r[s+19].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x44;r[s+20].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48;r[s+21].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x4c;r[s+22].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x50;r[s+23].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x54;r[s+24].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x58;r[s+25].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x5c end;if IsFirst then r[s+26].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress-0x4 end;if IsFirst then r[s].value="~A LDR PC, [PC,#-4]"r[s+1].value=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress;r[s+2].value="~A LDR r6, [PC,#-0xc]"r[s+3].value="~A STMDB r6, {R0-R5,LR}"end;if#h[k]['parameters']>=1 then r[s+4].value="~A LDR R1, [PC,#24]"if h[k]['parameters'][1][2]==true then r[s+12].value=1 elseif h[k]['parameters'][1][2]==false then r[s+12].value=0 else r[s+12].value=h[k]['parameters'][1][2]end;r[s+12].flags=HackersHouse.getType(h[k]['parameters'][1][1])else r[s+4].value="~A NOP"r[s+12].value="~A NOP"r[s+12].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=2 then r[s+5].value="~A LDR R2, [PC,#24]"if h[k]['parameters'][2][2]==true then r[s+13].value=1 elseif h[k]['parameters'][2][2]==false then r[s+13].value=0 else r[s+13].value=h[k]['parameters'][2][2]end;r[s+13].flags=HackersHouse.getType(h[k]['parameters'][2][1])else r[s+5].value="~A NOP"r[s+13].value="~A NOP"r[s+13].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=3 then r[s+6].value="~A LDR R3, [PC,#24]"if h[k]['parameters'][3][2]==true then r[s+14].value=1 elseif h[k]['parameters'][3][2]==false then r[s+14].value=0 else r[s+14].value=h[k]['parameters'][3][2]end;r[s+14].flags=HackersHouse.getType(h[k]['parameters'][3][1])else r[s+6].value="~A NOP"r[s+14].value="~A NOP"r[s+14].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=4 then r[s+7].value="~A LDR R4, [PC,#24]"if h[k]['parameters'][4][2]==true then r[s+15].value=1 elseif h[k]['parameters'][4][2]==false then r[s+15].value=4 else r[s+15].value=h[k]['parameters'][4][2]end;r[s+15].flags=HackersHouse.getType(h[k]['parameters'][4][1])else r[s+7].value="~A NOP"r[s+15].value="~A NOP"r[s+15].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=5 then r[s+8].value="~A LDR R5, [PC,#24]"if h[k]['parameters'][5][2]==true then r[s+16].value=1 elseif h[k]['parameters'][5][2]==false then r[s+16].value=0 else r[s+16].value=h[k]['parameters'][5][2]end;r[s+16].flags=HackersHouse.getType(h[k]['parameters'][5][1])else r[s+8].value="~A NOP"r[s+16].value="~A NOP"r[s+16].flags=gg.TYPE_DWORD end;if not IsReactivated then r[s+9].value="~A LDR R6, [PC,#24]"r[s+10].value="~A BLX r6"r[s+11].value="~A B +0x1c"r[s+17].value=t[u].start+h[k]['destinationOffset']r[s+18].value="~A B +0x8"r[s+19].value=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].startAddress+0x20-0x8;r[s+20].value="~A LDR r6, [PC,#-0xc]"r[s+21].value="~A LDMDB r6, {R0-R5,LR}"r[s+22].value=v[1].value;r[s+23].value=v[2].value;r[s+24].value="~A LDR PC, [PC,#-4]"r[s+25].value=v[2].address+0x4 end;if IsFirst then r[s+26].value=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress-0x8 end;r[s+29].value="~A BEQ +0x58"if not IsReactivated then r[s+27].value="~A LDR R1, [PC,#8]"r[s+28].value="~A CMP R1, #0"r[s+30].value="~A B +0xC"r[s+32].value=r[s+31].address;r[s+33].value="~A LDR R2, [PC,#-0xc]"r[s+34].value="~A LDR R1, [PC,#-0x14]"r[s+35].value="~A SUB R1, R1, #1"r[s+36].value="~A STR R1, [R2]"end;r[s+31].value=h[k]['repeat']if IsFirst then r[s].flags=gg.TYPE_DWORD;r[s+1].flags=gg.TYPE_DWORD;r[s+2].flags=gg.TYPE_DWORD;r[s+3].flags=gg.TYPE_DWORD end;r[s+4].flags=gg.TYPE_DWORD;r[s+5].flags=gg.TYPE_DWORD;r[s+6].flags=gg.TYPE_DWORD;r[s+7].flags=gg.TYPE_DWORD;r[s+8].flags=gg.TYPE_DWORD;if not IsReactivated then r[s+9].flags=gg.TYPE_DWORD;r[s+10].flags=gg.TYPE_DWORD;r[s+11].flags=gg.TYPE_DWORD;r[s+17].flags=gg.TYPE_DWORD;r[s+18].flags=gg.TYPE_DWORD;r[s+19].flags=gg.TYPE_DWORD;r[s+20].flags=gg.TYPE_DWORD;r[s+21].flags=gg.TYPE_DWORD;r[s+22].flags=gg.TYPE_DWORD;r[s+23].flags=gg.TYPE_DWORD;r[s+24].flags=gg.TYPE_DWORD;r[s+25].flags=gg.TYPE_DWORD end;if IsFirst then r[s+26].flags=gg.TYPE_DWORD end;if not IsReactivated then r[s+27].flags=gg.TYPE_DWORD;r[s+28].flags=gg.TYPE_DWORD;r[s+30].flags=gg.TYPE_DWORD;r[s+32].flags=gg.TYPE_DWORD;r[s+33].flags=gg.TYPE_DWORD;r[s+34].flags=gg.TYPE_DWORD;r[s+35].flags=gg.TYPE_DWORD;r[s+36].flags=gg.TYPE_DWORD end;r[s+29].flags=gg.TYPE_DWORD;r[s+31].flags=gg.TYPE_DWORD;s=s+37;if not IsReactivated then HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x9c+0x28-0x84 else HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=CurrentWriteAddress end end elseif HackersHouse.is64Bit==true then for k,l in ipairs(h)do if h[k]['repeat']=="infinite"then h[k]['repeat']=2000000000 end;local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;HackersHouse.AllocatedPageForVoidHook(h[k]['libName'],h[k]['targetOffset'])HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x48;local v={}if HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats==nil then HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats={}IsFirst=true else IsFirst=false end;if HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]==nil then IsReactivated=false else IsReactivated=true end;if not IsReactivated then HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]={}HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]['allocatedAddress']=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress else CurrentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress;HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]['allocatedAddress']end;if IsFirst then v[1]={}v[1].address=t[u].start+h[k]['targetOffset']v[1].flags=gg.TYPE_DWORD;v[2]={}v[2].address=t[u].start+h[k]['targetOffset']+0x4;v[2].flags=gg.TYPE_DWORD;v[3]={}v[3].address=t[u].start+h[k]['targetOffset']+0x8;v[3].flags=gg.TYPE_DWORD;v[4]={}v[4].address=t[u].start+h[k]['targetOffset']+0xC;v[4].flags=gg.TYPE_DWORD;v=gg.getValues(v)HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']]['RefillData']=v;r[s]={}r[s+1]={}r[s+2]={}r[s+3]={}r[s+37]={}r[s+39]={}r[s+40]={}r[s+41]={}else v=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']]['RefillData']end;r[s+4]={}r[s+5]={}r[s+6]={}r[s+7]={}r[s+8]={}if not IsReactivated then r[s+9]={}r[s+10]={}r[s+11]={}end;r[s+12]={}r[s+13]={}r[s+14]={}r[s+15]={}r[s+16]={}if not IsReactivated then r[s+17]={}r[s+18]={}r[s+19]={}r[s+20]={}r[s+21]={}r[s+43]={}r[s+44]={}r[s+45]={}r[s+22]={}r[s+23]={}r[s+38]={}r[s+46]={}r[s+47]={}r[s+24]={}r[s+42]={}r[s+25]={}end;if IsFirst then r[s+26]={}end;r[s+29]={}if not IsReactivated then r[s+27]={}r[s+28]={}r[s+30]={}r[s+32]={}r[s+33]={}r[s+34]={}r[s+35]={}r[s+36]={}end;r[s+31]={}if IsFirst then r[s].address=t[u].start+h[k]['targetOffset']r[s+1].address=t[u].start+h[k]['targetOffset']+0x4;r[s+37].address=t[u].start+h[k]['targetOffset']+0x8;r[s+2].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress;r[s+3].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x4;r[s+39].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x8;r[s+40].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0xC;r[s+41].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x10 end;r[s+29].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x10+0xc;if not IsReactivated then r[s+27].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x8+0xc;r[s+28].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0xc+0xc;r[s+30].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x14+0xc;r[s+32].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x1c+0xc+0x4;r[s+33].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x20+0xc+0x4+0x4;r[s+34].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x24+0xc+0x4+0x4;r[s+35].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0xc+0x4+0x4;r[s+36].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x2c+0xc+0x4+0x4 end;r[s+31].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x18+0xc;r[s+4].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x8+0xc+0x4+0x4;r[s+5].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0xc+0xc+0x4+0x4;r[s+6].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x10+0xc+0x4+0x4;r[s+7].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x14+0xc+0x4+0x4;r[s+8].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x18+0xc+0x4+0x4;if not IsReactivated then r[s+9].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x1c+0xc+0x4+0x4;r[s+10].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x20+0xc+0x4+0x4;r[s+11].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x24+0xc+0x4+0x4 end;r[s+12].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x28+0xc+0x4+0x4;r[s+13].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x2c+0xc+0x4+0x4+0x4;r[s+14].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x30+0xc+0x4+0x4+0x4+0x4;r[s+15].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x34+0xc+0x4+0x4+0x4+0x4+0x4;r[s+16].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x38+0xc+0x4+0x4+0x4+0x4+0x4+0x4;if not IsReactivated then r[s+17].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x3c+0xc+0x4+0x4+0x20+0x8-0x14;r[s+18].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x40+0xc+0x4+0x20+0x8+0x8-0x14;r[s+19].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x44+0xc+0x4+0x20+0x8+0x8-0x14;r[s+20].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8-0x14;r[s+21].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x4-0x14;r[s+43].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x8-0x14;r[s+44].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0xc-0x14;r[s+45].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10-0x14;r[s+22].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4-0x14;r[s+23].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x8-0x14;r[s+38].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4+0x8-0x14;r[s+46].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4+0x8-0x14+0x4;r[s+24].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4+0x8+0x8-0x14;r[s+42].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4+0x8+0x8+0x4-0x14;r[s+25].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4+0x8+0x8+0x4+0x4-0x14;r[s+47].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x28+0x48+0xc+0x4+0x4+0x20+0x8+0x8+0x10+0x4+0x8+0x8+0x4+0x4-0x14+0x4+0x4 end;if IsFirst then r[s+26].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress-0x8 end;if IsFirst then r[s].value="~A8 LDR  X11, [PC,#0x8]"r[s+1].value="~A8 BR X11"r[s+37].value=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress;r[s+2].value="~A8 LDR X11, [PC,#-0x8]"r[s+3].value="~A8 STP X0, X1, [X11], #0x10"r[s+39].value="~A8 STP X2, X3, [X11], #0x10"r[s+40].value="~A8 STP X4, X5, [X11], #0x10"r[s+41].value="~A8 STP X30, x29, [X11], #0x10"end;if#h[k]['parameters']>=1 then r[s+4].value="~A8 LDR X1, [PC,#0x20]"if h[k]['parameters'][1][2]==true then r[s+12].value=1 elseif h[k]['parameters'][1][2]==false then r[s+12].value=0 else r[s+12].value=h[k]['parameters'][1][2]end;r[s+12].flags=HackersHouse.getType(h[k]['parameters'][1][1])else r[s+4].value="~A8 NOP"r[s+12].value="~A8 NOP"r[s+12].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=2 then r[s+5].value="~A8 LDR X2, [PC,#0x24]"if h[k]['parameters'][2][2]==true then r[s+13].value=1 elseif h[k]['parameters'][2][2]==false then r[s+13].value=0 else r[s+13].value=h[k]['parameters'][2][2]end;r[s+13].flags=HackersHouse.getType(h[k]['parameters'][2][1])else r[s+5].value="~A8 NOP"r[s+13].value="~A8 NOP"r[s+13].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=3 then r[s+6].value="~A8 LDR X3, [PC,#0x28]"if h[k]['parameters'][3][2]==true then r[s+14].value=1 elseif h[k]['parameters'][3][2]==false then r[s+14].value=0 else r[s+14].value=h[k]['parameters'][3][2]end;r[s+14].flags=HackersHouse.getType(h[k]['parameters'][3][1])else r[s+6].value="~A8 NOP"r[s+14].value="~A8 NOP"r[s+14].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=4 then r[s+7].value="~A8 LDR X4, [PC,#0x2c]"if h[k]['parameters'][4][2]==true then r[s+15].value=1 elseif h[k]['parameters'][4][2]==false then r[s+15].value=4 else r[s+15].value=h[k]['parameters'][4][2]end;r[s+15].flags=HackersHouse.getType(h[k]['parameters'][4][1])else r[s+7].value="~A8 NOP"r[s+15].value="~A8 NOP"r[s+15].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=5 then r[s+8].value="~A8 LDR X5, [PC,#0x30]"if h[k]['parameters'][5][2]==true then r[s+16].value=1 elseif h[k]['parameters'][5][2]==false then r[s+16].value=0 else r[s+16].value=h[k]['parameters'][5][2]end;r[s+16].flags=HackersHouse.getType(h[k]['parameters'][5][1])else r[s+8].value="~A8 NOP"r[s+16].value="~A8 NOP"r[s+16].flags=gg.TYPE_DWORD end;if not IsReactivated then r[s+9].value="~A8 LDR X6, [PC,#0x34]"r[s+10].value="~A8 BLR X6"r[s+11].value="~A8  B  [PC,#0x34]"r[s+17].value=t[u].start+h[k]['destinationOffset']r[s+18].value="~A8  B  [PC,#0xc]"r[s+19].value=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].startAddress;r[s+20].value="~A8 LDR X11, [PC,#-0x8]"r[s+21].value="~A8 LDP X0, X1, [X11], #0x10"r[s+43].value="~A8 LDP X2, X3, [X11], #0x10"r[s+44].value="~A8 LDP X4, X5, [X11], #0x10"r[s+45].value="~A8 LDP X30, X29, [X11], #0x10"r[s+22].value=v[1].value;r[s+23].value=v[2].value;r[s+38].value=v[3].value;ARMCODE=gg.disasm(gg.ASM_ARM64,0,v[4].value)Register=0;OffsetArm=0;if string.find(ARMCODE,"ADRP")~=nil then for w in ARMCODE:gmatch("X%d+")do local f=w:match("%d+")Register=f;break end;for w in ARMCODE:gmatch(",#0x%x+]")do local f=w:match("#(0x%x+)%]")OffsetArm=f;break end;r[s+46].value="~A8 LDR  X"..Register..", [PC,#0x14]"r[s+47].value=v[4].address+OffsetArm else r[s+46].value=v[4].value;r[s+47].value="~A8 NOP"end;r[s+24].value="~A8 LDR  X11, [PC,#0x8]"r[s+42].value="~A8 BR X11"r[s+25].value=v[2].address+0x4+0x8 end;if IsFirst then r[s+26].value=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].startAddress end;r[s+29].value="~A8  B.EQ  [PC,#0x98]"if not IsReactivated then r[s+27].value="~A8 LDR X1, [PC,#0x10]"r[s+28].value="~A8 CMP X1, #0"r[s+30].value="~A8  B  [PC,#0x14]"r[s+32].value=r[s+31].address;r[s+33].value="~A8 LDR X2, [PC,#-0x8]"r[s+34].value="~A8 LDR X1, [PC,#-0x14]"r[s+35].value="~A8 SUB X1, X1, #1"r[s+36].value="~A8 STR X1, [X2]"end;r[s+31].value=h[k]['repeat']if IsFirst then r[s].flags=gg.TYPE_DWORD;r[s+1].flags=gg.TYPE_DWORD;r[s+2].flags=gg.TYPE_DWORD;r[s+3].flags=gg.TYPE_DWORD;r[s+37].flags=gg.TYPE_QWORD;r[s+39].flags=gg.TYPE_QWORD;r[s+40].flags=gg.TYPE_QWORD;r[s+41].flags=gg.TYPE_DWORD end;r[s+4].flags=gg.TYPE_DWORD;r[s+5].flags=gg.TYPE_DWORD;r[s+6].flags=gg.TYPE_DWORD;r[s+7].flags=gg.TYPE_DWORD;r[s+8].flags=gg.TYPE_DWORD;if not IsReactivated then r[s+9].flags=gg.TYPE_DWORD;r[s+10].flags=gg.TYPE_DWORD;r[s+11].flags=gg.TYPE_DWORD;r[s+17].flags=gg.TYPE_QWORD;r[s+18].flags=gg.TYPE_DWORD;r[s+19].flags=gg.TYPE_QWORD;r[s+20].flags=gg.TYPE_DWORD;r[s+21].flags=gg.TYPE_DWORD;r[s+43].flags=gg.TYPE_DWORD;r[s+44].flags=gg.TYPE_DWORD;r[s+45].flags=gg.TYPE_DWORD;r[s+22].flags=gg.TYPE_DWORD;r[s+23].flags=gg.TYPE_DWORD;r[s+38].flags=gg.TYPE_DWORD;r[s+46].flags=gg.TYPE_DWORD;r[s+47].flags=gg.TYPE_QWORD;r[s+24].flags=gg.TYPE_DWORD;r[s+42].flags=gg.TYPE_DWORD;r[s+25].flags=gg.TYPE_QWORD end;if IsFirst then r[s+26].flags=gg.TYPE_QWORD end;if not IsReactivated then r[s+27].flags=gg.TYPE_DWORD;r[s+28].flags=gg.TYPE_DWORD;r[s+30].flags=gg.TYPE_DWORD;r[s+32].flags=gg.TYPE_QWORD;r[s+33].flags=gg.TYPE_DWORD;r[s+34].flags=gg.TYPE_DWORD;r[s+35].flags=gg.TYPE_DWORD;r[s+36].flags=gg.TYPE_DWORD end;r[s+29].flags=gg.TYPE_DWORD;r[s+31].flags=gg.TYPE_DWORD;s=s+48;if not IsReactivated then HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress+0x9c+0x28-0x84+0x10+0x8 else HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].currentWriteAddress=CurrentWriteAddress end end end;gg.setValues(r)gg.processResume()end,['disableMethod']=function(h)if HackersHouse.validation("disableMethod",h)then return end;local r={}for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;r[k]={}r[k].address=t[u].start+h[k]['offset']r[k].flags=gg.TYPE_DWORD;HackersHouse.disableMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.disableMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=gg.getValues({[1]={['address']=t[u].start+h[k]['offset'],['flags']=gg.TYPE_DWORD}})if HackersHouse.is64Bit then r[k].value="~A8 RET"else r[k].value="~A BX LR"end end;gg.setValues(r)end,['returnValue']=function(h)if HackersHouse.validation("returnValue",h)then return end;local r={}local x=1;HackersHouse.AllocatedPageForReturnValue()for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;if h[k]['valueType']=="bool"then if h[k]['value']==true then r[x]={}r[x+1]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']=0;HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=gg.getValues({[1]={['address']=t[u].start+h[k]['offset'],['flags']=gg.TYPE_DWORD},[2]={['address']=t[u].start+h[k]['offset']+0x4,['flags']=gg.TYPE_DWORD}})r[x].address=t[u].start+h[k]['offset']r[x+1].address=t[u].start+h[k]['offset']+0x4;if HackersHouse.is64Bit then r[x].value="~A8 MOV X0, #0x1"r[x+1].value="~A8 RET"else r[x].value="~A MOV R0, #1"r[x+1].value="~A BX LR"end;r[x].flags=gg.TYPE_DWORD;r[x+1].flags=gg.TYPE_DWORD;x=x+2 elseif h[k]['value']==false then r[x]={}r[x+1]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']=0;HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=gg.getValues({[1]={['address']=t[u].start+h[k]['offset'],['flags']=gg.TYPE_DWORD},[2]={['address']=t[u].start+h[k]['offset']+0x4,['flags']=gg.TYPE_DWORD}})r[x].address=t[u].start+h[k]['offset']r[x+1].address=t[u].start+h[k]['offset']+0x4;if HackersHouse.is64Bit then r[x].value='h000080D2'r[x+1].value="~A8 RET"else r[x].value="~A MOV R0, #0"r[x+1].value="~A BX LR"end;r[x].flags=gg.TYPE_DWORD;r[x+1].flags=gg.TYPE_DWORD;x=x+2 end end;if HackersHouse.is64Bit then if h[k]['valueType']=="int"or h[k]['valueType']=="float"or h[k]['valueType']=="long int"then r[x]={}r[x+1]={}r[x+2]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']=0;HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=gg.getValues({[1]={['address']=t[u].start+h[k]['offset'],['flags']=gg.TYPE_DWORD},[2]={['address']=t[u].start+h[k]['offset']+0x4,['flags']=gg.TYPE_DWORD},[3]={['address']=t[u].start+h[k]['offset']+0x8,['flags']=gg.TYPE_DWORD}})r[x].address=t[u].start+h[k]['offset']r[x+1].address=t[u].start+h[k]['offset']+0x4;r[x+2].address=t[u].start+h[k]['offset']+0x8;r[x].value="~A8 LDR X0, [PC,#0x8]"r[x+1].value="~A8 RET"r[x+2].value=h[k]['value']r[x].flags=gg.TYPE_DWORD;r[x+1].flags=gg.TYPE_DWORD;r[x+2].flags=HackersHouse.getType(h[k]['valueType'])x=x+3 end else if h[k]['valueType']=="int"or h[k]['valueType']=="float"or h[k]['valueType']=="long int"then r[x]={}r[x+1]={}r[x+2]={}r[x+3]={}r[x+4]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['allocatedAddress']=0;HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=gg.getValues({[1]={['address']=t[u].start+h[k]['offset'],['flags']=gg.TYPE_DWORD},[2]={['address']=t[u].start+h[k]['offset']+0x4,['flags']=gg.TYPE_DWORD}})r[x].address=t[u].start+h[k]['offset']r[x+1].address=t[u].start+h[k]['offset']+0x4;r[x+2].address=HackersHouse.returnValueList.currentWriteAddress;r[x+3].address=HackersHouse.returnValueList.currentWriteAddress+0x4;r[x+4].address=HackersHouse.returnValueList.currentWriteAddress+0x8;r[x].value="~A LDR PC, [PC,#-4]"r[x+1].value=HackersHouse.returnValueList.currentWriteAddress;r[x+2].value="~A LDR R0, [PC]"r[x+3].value="~A BX LR"r[x+4].value=h[k]['value']HackersHouse.returnValueList.currentWriteAddress=HackersHouse.returnValueList.currentWriteAddress+0xC;r[x].flags=gg.TYPE_DWORD;r[x+1].flags=gg.TYPE_DWORD;r[x+2].flags=gg.TYPE_DWORD;r[x+3].flags=gg.TYPE_DWORD;r[x+4].flags=HackersHouse.getType(h[k]['valueType'])x=x+5 end end end;gg.setValues(r)end,['hexPatch']=function(h)if HackersHouse.validation("hexPatch",h)then return end;local y;local f;local z={}local A=1;for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;y=t[u].start+h[k]['offset']f=h[k]['hexPatch']local B=string.find(f,' ')local C=string.sub(f,B+1)local D={}for k=1,#C,2 do local E=C:sub(k,k+1)table.insert(D,E)end;local F=1;DefaultValues={}DefaultValuesIndex=1;while F<=#D do DefaultValues[DefaultValuesIndex]={}DefaultValues[DefaultValuesIndex].address=y-1+F;DefaultValues[DefaultValuesIndex].flags=gg.TYPE_BYTE;DefaultValuesIndex=DefaultValuesIndex+1;z[A]={}z[A].address=y-1+F;z[A].flags=gg.TYPE_BYTE;z[A].value="h "..D[F]A=A+1;F=F+1 end;HackersHouse.hexPatchList.activatedCheats[h[k]['libName']..h[k]['offset']]={}HackersHouse.hexPatchList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues']=gg.getValues(DefaultValues)end;gg.setValues(z)end,['callAnotherMethod']=function(h)if HackersHouse.validation("callAnotherMethod",h)then return end;HackersHouse.AllocatedPageForCallAnotherMethod()local r={}local s=1;if HackersHouse.is64Bit==false then for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;local v={}if HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]==nil then IsReactivated=false else IsReactivated=true end;if IsReactivated then currentWriteAddresBackup=HackersHouse.callAnotherMethodList.currentWriteAddress;HackersHouse.callAnotherMethodList.currentWriteAddress=HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['allocatedAddress']v=HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['defaultValues']else v[1]={}v[1].address=t[u].start+h[k]['targetOffset']v[1].flags=gg.TYPE_DWORD;v[2]={}v[2].address=t[u].start+h[k]['targetOffset']+0x4;v[2].flags=gg.TYPE_DWORD;v=gg.getValues(v)HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]={}HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['allocatedAddress']=HackersHouse.callAnotherMethodList.currentWriteAddress;HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['defaultValues']=v end;r[s]={}r[s+1]={}r[s+2]={}r[s+3]={}r[s+4]={}r[s+5]={}r[s+6]={}r[s+7]={}r[s+8]={}r[s+9]={}r[s+10]={}r[s+11]={}r[s+12]={}r[s+13]={}r[s].address=t[u].start+h[k]['targetOffset']r[s+1].address=t[u].start+h[k]['targetOffset']+0x4;r[s+2].address=HackersHouse.callAnotherMethodList.currentWriteAddress;r[s+3].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x4;r[s+4].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x8;r[s+5].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0xc;r[s+6].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x10;r[s+7].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x14;r[s+8].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x18;r[s+9].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x1c;r[s+10].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x20;r[s+11].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x24;r[s+12].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x28;r[s+13].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x2c;r[s].value="~A LDR PC, [PC,#-4]"r[s+1].value=HackersHouse.callAnotherMethodList.currentWriteAddress;if#h[k]['parameters']>=1 then r[s+2].value="~A LDR R1, [PC,#20]"if h[k]['parameters'][1][2]==true then r[s+9].value=1 elseif h[k]['parameters'][1][2]==false then r[s+9].value=0 else r[s+9].value=h[k]['parameters'][1][2]end;r[s+9].flags=HackersHouse.getType(h[k]['parameters'][1][1])else r[s+2].value="~A NOP"r[s+9].value="~A NOP"r[s+9].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=2 then r[s+3].value="~A LDR R2, [PC,#20]"if h[k]['parameters'][2][2]==true then r[s+10].value=1 elseif h[k]['parameters'][2][2]==false then r[s+10].value=0 else r[s+10].value=h[k]['parameters'][2][2]end;r[s+10].flags=HackersHouse.getType(h[k]['parameters'][2][1])else r[s+3].value="~A NOP"r[s+10].value="~A NOP"r[s+10].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=3 then r[s+4].value="~A LDR R3, [PC,#20]"if h[k]['parameters'][3][2]==true then r[s+11].value=1 elseif h[k]['parameters'][3][2]==false then r[s+11].value=0 else r[s+11].value=h[k]['parameters'][3][2]end;r[s+11].flags=HackersHouse.getType(h[k]['parameters'][3][1])else r[s+4].value="~A NOP"r[s+11].value="~A NOP"r[s+11].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=4 then r[s+5].value="~A LDR R4, [PC,#20]"if h[k]['parameters'][4][2]==true then r[s+12].value=1 elseif h[k]['parameters'][4][2]==false then r[s+12].value=0 else r[s+12].value=h[k]['parameters'][4][2]end;r[s+12].flags=HackersHouse.getType(h[k]['parameters'][4][1])else r[s+5].value="~A NOP"r[s+12].value="~A NOP"r[s+12].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=5 then r[s+6].value="~A LDR R5, [PC,#20]"if h[k]['parameters'][5][2]==true then r[s+13].value=1 elseif h[k]['parameters'][5][2]==false then r[s+13].value=0 else r[s+13].value=h[k]['parameters'][5][2]end;r[s+13].flags=HackersHouse.getType(h[k]['parameters'][5][1])else r[s+6].value="~A NOP"r[s+13].value="~A NOP"r[s+13].flags=gg.TYPE_DWORD end;r[s+7].value="~A LDR PC, [PC,#-4]"r[s+8].value=t[u].start+h[k]['destinationOffset']r[s].flags=gg.TYPE_DWORD;r[s+1].flags=gg.TYPE_DWORD;r[s+2].flags=gg.TYPE_DWORD;r[s+3].flags=gg.TYPE_DWORD;r[s+4].flags=gg.TYPE_DWORD;r[s+5].flags=gg.TYPE_DWORD;r[s+6].flags=gg.TYPE_DWORD;r[s+7].flags=gg.TYPE_DWORD;r[s+8].flags=gg.TYPE_DWORD;s=s+14;if IsReactivated then HackersHouse.callAnotherMethodList.currentWriteAddress=currentWriteAddresBackup else HackersHouse.callAnotherMethodList.currentWriteAddress=HackersHouse.callAnotherMethodList.currentWriteAddress+0x30 end end elseif HackersHouse.is64Bit==true then for k,l in ipairs(h)do local t=gg.getRangesList(h[k]['libName'])local u;if h[k]['libIndex']=="auto"then u=HackersHouse.getLibIndex(t)else u=h[k]['libIndex']end;local v={}v[1]={}v[1].address=t[u].start+h[k]['targetOffset']v[1].flags=gg.TYPE_DWORD;v[2]={}v[2].address=t[u].start+h[k]['targetOffset']+0x4;v[2].flags=gg.TYPE_DWORD;v[3]={}v[3].address=t[u].start+h[k]['targetOffset']+0x8;v[3].flags=gg.TYPE_QWORD;v=gg.getValues(v)if HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]==nil then IsReactivated=false else IsReactivated=true end;if IsReactivated then currentWriteAddressBackup=HackersHouse.callAnotherMethodList.currentWriteAddress;HackersHouse.callAnotherMethodList.currentWriteAddress=HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['allocatedAddress']else HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]={}HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['allocatedAddress']=HackersHouse.callAnotherMethodList.currentWriteAddress;HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['defaultValues']=v end;r[s]={}r[s+1]={}r[s+2]={}r[s+3]={}r[s+4]={}r[s+5]={}r[s+6]={}r[s+7]={}r[s+8]={}r[s+9]={}r[s+10]={}r[s+11]={}r[s+12]={}r[s+13]={}r[s+14]={}r[s+15]={}r[s].address=t[u].start+h[k]['targetOffset']r[s+1].address=t[u].start+h[k]['targetOffset']+0x4;r[s+2].address=t[u].start+h[k]['targetOffset']+0x8;r[s+3].address=HackersHouse.callAnotherMethodList.currentWriteAddress;r[s+4].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x4;r[s+5].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x8;r[s+6].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0xc;r[s+7].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x10;r[s+8].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x14;r[s+9].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x18;r[s+10].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x1c;r[s+11].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x24;r[s+12].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x2c;r[s+13].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x34;r[s+14].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x3c;r[s+15].address=HackersHouse.callAnotherMethodList.currentWriteAddress+0x44;r[s].value="~A8 LDR  X1, [PC,#0x8]"r[s+1].value="~A8 BR X1"r[s+2].value=HackersHouse.callAnotherMethodList.currentWriteAddress;if#h[k]['parameters']>=1 then r[s+3].value="~A8 LDR X1, [PC,#0x24]"if h[k]['parameters'][1][2]==true then r[s+11].value=1 elseif h[k]['parameters'][1][2]==false then r[s+11].value=0 else r[s+11].value=h[k]['parameters'][1][2]end;r[s+11].flags=HackersHouse.getType(h[k]['parameters'][1][1])else r[s+3].value="~A8 NOP"r[s+11].value="~A8 NOP"r[s+11].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=2 then r[s+4].value="~A8 LDR X2, [PC,#0x28]"if h[k]['parameters'][2][2]==true then r[s+12].value=1 elseif h[k]['parameters'][2][2]==false then r[s+12].value=0 else r[s+12].value=h[k]['parameters'][2][2]end;r[s+12].flags=HackersHouse.getType(h[k]['parameters'][2][1])else r[s+4].value="~A8 NOP"r[s+12].value="~A8 NOP"r[s+12].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=3 then r[s+5].value="~A8 LDR X3, [PC,#0x2c]"if h[k]['parameters'][3][2]==true then r[s+13].value=1 elseif h[k]['parameters'][3][2]==false then r[s+13].value=0 else r[s+13].value=h[k]['parameters'][3][2]end;r[s+13].flags=HackersHouse.getType(h[k]['parameters'][3][1])else r[s+5].value="~A8 NOP"r[s+13].value="~A8 NOP"r[s+13].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=4 then r[s+6].value="~A8 LDR X4, [PC,#0x30]"if h[k]['parameters'][4][2]==true then r[s+14].value=1 elseif h[k]['parameters'][4][2]==false then r[s+14].value=0 else r[s+14].value=h[k]['parameters'][4][2]end;r[s+14].flags=HackersHouse.getType(h[k]['parameters'][4][1])else r[s+6].value="~A8 NOP"r[s+14].value="~A8 NOP"r[s+14].flags=gg.TYPE_DWORD end;if#h[k]['parameters']>=5 then r[s+7].value="~A8 LDR X5, [PC,#0x34]"if h[k]['parameters'][5][2]==true then r[s+15].value=1 elseif h[k]['parameters'][5][2]==false then r[s+15].value=0 else r[s+15].value=h[k]['parameters'][5][2]end;r[s+15].flags=HackersHouse.getType(h[k]['parameters'][5][1])else r[s+7].value="~A8 NOP"r[s+15].value="~A8 NOP"r[s+15].flags=gg.TYPE_DWORD end;r[s+8].value="~A8 LDR  X6, [PC,#0x8]"r[s+9].value="~A8 BR X6"r[s+10].value=t[u].start+h[k]['destinationOffset']r[s].flags=gg.TYPE_DWORD;r[s+1].flags=gg.TYPE_DWORD;r[s+2].flags=gg.TYPE_QWORD;r[s+3].flags=gg.TYPE_DWORD;r[s+4].flags=gg.TYPE_DWORD;r[s+5].flags=gg.TYPE_DWORD;r[s+6].flags=gg.TYPE_DWORD;r[s+7].flags=gg.TYPE_DWORD;r[s+8].flags=gg.TYPE_DWORD;r[s+9].flags=gg.TYPE_DWORD;r[s+10].flags=gg.TYPE_QWORD;s=s+16;if IsReactivated then HackersHouse.callAnotherMethodList.currentWriteAddress=currentWriteAddressBackup else HackersHouse.callAnotherMethodList.currentWriteAddress=HackersHouse.callAnotherMethodList.currentWriteAddress+0x48+0x4 end end end;gg.setValues(r)end,['hijackParametersOff']=function(h)if HackersHouse.validation("hijackParametersOff",h)then return end;for k,l in ipairs(h)do if HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]~=nil then gg.setValues(HackersHouse.hookMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues'])end end end,['voidHookOff']=function(h)if HackersHouse.validation("voidHookOff",h)then return end;if HackersHouse.is64Bit==true then Patch="~A8 B [PC,#0x98]"Offsett=0xC else Patch="~A B +0x58"Offsett=0x0 end;local r={}for k,l in ipairs(h)do if HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']]~=nil then if HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]~=nil then r[k]={}r[k].address=HackersHouse.voidHookList['Allocations'][h[k]['libName']..h[k]['targetOffset']].activatedCheats[h[k]['destinationOffset']]['allocatedAddress']+0x10+Offsett;r[k].flags=gg.TYPE_DWORD;r[k].value=Patch end end end;gg.setValues(r)end,['disableMethodOff']=function(h)if HackersHouse.validation("disableMethodOff",h)then return end;for k,l in ipairs(h)do if HackersHouse.disableMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]~=nil then gg.setValues(HackersHouse.disableMethodList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues'])end end end,['returnValueOff']=function(h)if HackersHouse.validation("returnValueOff",h)then return end;for k,l in ipairs(h)do if HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]~=nil then gg.setValues(HackersHouse.returnValueList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues'])end end end,['hexPatchOff']=function(h)if HackersHouse.validation("hexPatchOff",h)then return end;for k,l in ipairs(h)do if HackersHouse.hexPatchList.activatedCheats[h[k]['libName']..h[k]['offset']]~=nil then gg.setValues(HackersHouse.hexPatchList.activatedCheats[h[k]['libName']..h[k]['offset']]['defaultValues'])end end end,['callAnotherMethodOff']=function(h)if HackersHouse.validation("callAnotherMethodOff",h)then return end;for k,l in ipairs(h)do if HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]~=nil then gg.setValues(HackersHouse.callAnotherMethodList.activatedCheats[h[k]['libName']..h[k]['targetOffset']]['defaultValues'])end end end,['getType']=function(G)if G=="bool"then return gg.TYPE_BYTE elseif G=="int"then return gg.TYPE_DWORD elseif G=="long int"then return gg.TYPE_QWORD elseif G=="float"then return gg.TYPE_FLOAT elseif G=="double"then return gg.TYPE_DOUBLE end end}HackersHouse.UpdateChecked()

HackersHouse.voidHook({
	{ ['libName'] = "libil2cpp",
	  ['targetOffset'] = Jump,
	  ['destinationOffset'] = AddCoins,
	  ['parameters'] ={ {"int", 10000} },
	  ['repeat'] = 1,
	  ['libIndex'] = 'auto'
	}})
gg.toast("Hooked! Jump to add coins.")
